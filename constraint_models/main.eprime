language ESSENCE' 1.0

given cards : matrix indexed by [ int(1..n) ] of int(0..51)
where alldifferent(cards)


$ Domains to iterate lists
letting LENGTH be domain int(1..n)
letting RANGE be domain int(1..n-1)
letting RANGE2 be domain int(2..n-1) $TODO
letting MOVES be domain int(1, 3)
letting CARD_DOMAIN be domain int(-1, cards)


$-------------------------------------------------------------------------------------------------
$ decision variables

find moves : matrix indexed by [RANGE] of MOVES
find movesFrom : matrix indexed by [RANGE] of int(2..n)
find movesTo : matrix indexed by [RANGE] of int(1..n-1)
find states : matrix indexed by [LENGTH, LENGTH] of CARD_DOMAIN

$-------------------------------------------------------------------------------------------------

such that 

$-------------------------------------------------------------------------------------------------
$ constraints


$ set starting states
forAll j : LENGTH .
    states[1, j] = cards[j],


forAll i : RANGE .
    forAll j : RANGE .
        (j > movesTo[i] /\ moves[i] = 1)
        ->
        states[i + 1, j] = states[i, j + 1],

forAll i : RANGE .
    forAll j : RANGE .
        (j > movesTo[i] /\ j < movesFrom[i] /\ moves[i] = 3)
        ->
        states[i + 1, j] = states[i, j],


forAll i : RANGE .
    forAll j : LENGTH .
        (moves[i] = 3 /\ movesFrom[i] < (n - (i - 1)) /\ j <= (n - (i - 1)) /\ j > movesFrom[i])
        ->
        states[i + 1, j - 1] = states[i, j],



forAll i : RANGE .
    forAll j : LENGTH .
        j < movesTo[i]
        ->
        states[i + 1, j] = states[i, j],

forAll i : RANGE .
    states[i + 1, movesTo[i]] = states[i, movesFrom[i]],



forAll a : RANGE .
    states[a, movesFrom[a]] % 13 = states[a, movesTo[a]] % 13
    \/
    states[a, movesFrom[a]] / 13 = states[a, movesTo[a]] / 13,


forAll i : LENGTH .
    forAll j : LENGTH .
        j > (n - i + 1)
        ->
        states[i, j] = -1,


forAll i : RANGE .
    movesFrom[i] <= n - (i - 1),


forAll i : RANGE .
    movesFrom[i] = movesTo[i] + 1
    \/
    movesFrom[i] = movesTo[i] + 3,

forAll i : RANGE .
    movesFrom[i] = movesTo[i] + 1
    ->
    moves[i] = 1,

forAll i : RANGE .
    movesFrom[i] = movesTo[i] + 3
    ->
    moves[i] = 3,


forAll i : RANGE .
    movesFrom[i] > movesTo[i],

true
